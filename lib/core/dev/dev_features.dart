import 'dev_feature_registry.dart';
import 'dev_flags.dart';
import 'dev_settings_service.dart';
import 'package:onebeauty_clean/core/config/app_config.dart';

class DevFeaturesCatalog {
  static bool _registered = false;

  /// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è Dev-—Ñ–∏—á–∏ (–≤—ã–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑).
  static void ensureRegistered() {
    if (_registered) return;
    _registered = true;

    // Advice: Use API (override)
    DevFeatureRegistry.register(
      DevFeature(
        key: 'advice.useApi',
        group: 'Advice',
        title: 'Use API (override)',
        subtitle: () => 'Config: ${kUseAdviceApi ? 'ON' : 'OFF'}',
        getOverride: () => DevFlags.adviceUseApiOverride,
        setOverride: DevSettingsService.setAdviceUseApiOverride,
        order: 10,
      ),
    );

    // Advice: Show source badge (override)
    DevFeatureRegistry.register(
      DevFeature(
        key: 'advice.showBadge',
        group: 'Advice',
        title: 'Show source badge (override)',
        subtitle: () => 'Config: ${kShowAdviceSourceBadge ? 'ON' : 'OFF'}',
        getOverride: () => DevFlags.adviceShowBadgeOverride,
        setOverride: DevSettingsService.setAdviceShowBadgeOverride,
        order: 20,
      ),
    );

    // Today‚Äôs tasks: AI filter (override)
    DevFeatureRegistry.register(
      DevFeature(
        key: 'today.aiFilter',
        group: 'Today‚Äôs tasks',
        title: 'Use AI filter (override)',
        subtitle: () => 'Config: ${kUseAiForTodayTasks ? 'ON' : 'OFF'}',
        getOverride: () => DevFlags.aiFilterTodayOverride,
        setOverride: DevSettingsService.setAiFilterTodayOverride,
        order: 10,
      ),
    );

    // üëâ –î–æ–±–∞–≤–∏—à—å –Ω–æ–≤—É—é AI-—Ñ–∏—á—É ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–¥–µ–ª–∞–π –µ—â—ë –æ–¥–∏–Ω DevFeatureRegistry.register(...)
    //    –∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ Dev-—ç–∫—Ä–∞–Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
  }
}
