// AI ARB Translator / Sync
//
// –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
// - –ë–µ—Ä—ë—Ç lib/l10n/app_en.arb –∫–∞–∫ –±–∞–∑—É.
// - –î–ª—è –∫–∞–∂–¥–æ–≥–æ app_<locale>.arb (ru, es, ...):
//   * –ù–∞—Ö–æ–¥–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫–ª—é—á–∏ (–ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å EN).
//   * –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω API ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç—ã –≤ /ai/translate –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç—ã.
//   * –ï—Å–ª–∏ API –Ω–µ –∑–∞–¥–∞–Ω/—É–ø–∞–ª ‚Äî –∫–æ–ø–∏—Ä—É–µ—Ç EN (–∏–ª–∏ "", –µ—Å–ª–∏ --copy-empty).
//   * –ö–æ–ø–∏—Ä—É–µ—Ç placeholders/description –∏–∑ EN –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
//   * –°—Ç–∞–≤–∏—Ç @<key>.x-sourceText = <—Ç–µ–∫—É—â–∏–π EN> –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±—É–¥—É—â–µ–º.
//   * –ü–æ–º–µ—á–∞–µ—Ç x-translationState: "machine" (–∏–∑ API) –∏–ª–∏ "pending" (—Ñ–æ–ª–ª–±—ç–∫).
//   * –ù–ò–ß–ï–ì–û –Ω–µ —É–¥–∞–ª—è–µ—Ç –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö ARB.
//
// –ó–∞–ø—É—Å–∫ (–ø—Ä–∏–º–µ—Ä—ã):
//   dart run tool/translate_arb_ai.dart --api-base=http://127.0.0.1:8788 --locales=ru,es
//   dart run tool/translate_arb_ai.dart --copy-empty --locales=ru,es
//
// –ü–æ—Å–ª–µ ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏:
//   flutter gen-l10n
//
// –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞–∫–µ—Ç http (—É –≤–∞—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω).
//
// –ö–æ–Ω—Ç—Ä–∞–∫—Ç API /ai/translate (–ø—Ä–∏–º–µ—Ä):
//   POST <apiBase>/ai/translate
//   {
//     "source_lang": "en",
//     "target_lang": "ru",
//     "items": [
//       {"key":"statsTitle","text":"Statistics","placeholders":["name"],"description":"..."},
//       ...
//     ]
//   }
//   => 200 OK
//   {
//     "translations": [
//       {"key":"statsTitle","text":"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"},
//       ...
//     ]
//   }

import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;

const String kL10nDir = 'lib/l10n';
const String kBaseFile = 'app_en.arb';

// –ø—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ package:args
class _Args {
  String? apiBase;
  List<String> locales = const []; // –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –±–µ—Ä—ë–º –≤—Å–µ app_*.arb
  bool copyEmpty = false;

  static _Args parse(List<String> args) {
    final a = _Args();
    for (final s in args) {
      if (s.startsWith('--api-base=')) {
        a.apiBase = s.substring('--api-base='.length).trim();
        if (a.apiBase!.isEmpty) a.apiBase = null;
      } else if (s.startsWith('--locales=')) {
        final v = s.substring('--locales='.length).trim();
        a.locales = v.isEmpty
            ? []
            : v
                .split(',')
                .map((x) => x.trim())
                .where((x) => x.isNotEmpty)
                .toList();
      } else if (s == '--copy-empty') {
        a.copyEmpty = true;
      }
    }
    return a;
  }
}

void main(List<String> argsRaw) async {
  final args = _Args.parse(argsRaw);

  final basePath = '$kL10nDir/$kBaseFile';
  final baseFile = File(basePath);
  if (!baseFile.existsSync()) {
    stderr.writeln('‚ùå Not found: $basePath');
    exit(2);
  }
  final Map<String, dynamic> en = _readJson(basePath);
  stdout.writeln('üåê Base: $kBaseFile (${en.length} entries incl. metadata)');

  // –°–æ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö ARB
  final dir = Directory(kL10nDir);
  final files = dir
      .listSync()
      .whereType<File>()
      .where((f) => f.path.endsWith('.arb') && !f.path.endsWith('/$kBaseFile'))
      .toList();

  // –§–∏–ª—å—Ç—Ä –ø–æ --locales=ru,es –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
  final filtered = args.locales.isEmpty
      ? files
      : files.where((f) {
          final loc = _inferLocaleFromFile(f.path);
          return loc != null && args.locales.contains(loc);
        }).toList();

  if (filtered.isEmpty) {
    final available =
        files.map((f) => _inferLocaleFromFile(f.path) ?? '?').toList();
    stdout.writeln('‚ö†Ô∏è  No target ARB files matched. Available: $available');
    return;
  }

  int totalAddedAll = 0;
  for (final f in filtered) {
    final locale = _inferLocaleFromFile(f.path) ?? '??';
    stdout.writeln('\n‚Äî‚Äî‚Äî\nüìù Processing ${f.path} (locale: $locale)');

    final target = _readJson(f.path);

    final result = await _mergeWithAi(
      en: en,
      target: target,
      targetLocale: locale,
      apiBase: args.apiBase,
      copyEmpty: args.copyEmpty,
    );

    // –ó–∞–ø–∏—Å—å
    final encoder = const JsonEncoder.withIndent('  ');
    await f.writeAsString('${encoder.convert(result.map)}\n');
    stdout.writeln(
        '‚úÖ Updated ${f.path}. Added ${result.added} key(s), translated ${result.translated} key(s).');

    totalAddedAll += result.added;
  }

  stdout.writeln('\nüéâ Done. Total added: $totalAddedAll.');
  stdout.writeln('üëâ Now run:  flutter gen-l10n');
}

Map<String, dynamic> _readJson(String path) {
  try {
    final txt = File(path).readAsStringSync();
    final obj = jsonDecode(txt);
    if (obj is Map<String, dynamic>) return obj;
  } catch (e) {
    stderr.writeln('‚ùå JSON parse error in $path: $e');
  }
  return <String, dynamic>{};
}

String? _inferLocaleFromFile(String path) {
  final name = path.split(Platform.pathSeparator).last; // app_ru.arb
  final m = RegExp(r'app_([a-zA-Z_-]+)\.arb$').firstMatch(name);
  return m?.group(1);
}

class _MergeResult {
  final Map<String, dynamic> map;
  final int added; // –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ (–Ω–µ –±—ã–ª–æ –≤ target)
  final int translated; // —Ä–µ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ —á–µ—Ä–µ–∑ API
  _MergeResult(this.map, this.added, this.translated);
}

/// –°–ª–∏—è–Ω–∏–µ + (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–µ—Ä–µ–≤–æ–¥—ã —á–µ—Ä–µ–∑ API.
/// –õ–æ–≥–∏–∫–∞ ‚Äú–Ω—É–∂–µ–Ω –ª–∏ –Ω–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥‚Äù:
///  - –ï—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ target ‚Üí –ø–µ—Ä–µ–≤–æ–¥–∏–º/–∫–æ–ø–∏—Ä—É–µ–º.
///  - –ï—Å–ª–∏ @key.x-sourceText –≤ target != —Ç–µ–∫—É—â–µ–º—É EN ‚Üí –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ (EN –∏–∑–º–µ–Ω–∏–ª—Å—è).
Future<_MergeResult> _mergeWithAi({
  required Map<String, dynamic> en,
  required Map<String, dynamic> target,
  required String targetLocale,
  required String? apiBase,
  required bool copyEmpty,
}) async {
  final out = <String, dynamic>{};
  int added = 0;
  int translated = 0;

  // —Å–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä—Ç–∏—é –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
  final batch = <Map<String, dynamic>>[];

  for (final key in en.keys) {
    if (key.startsWith('@')) {
      // –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å—ë–º –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      continue;
    }

    final enVal = en[key];
    final metaKey = '@$key';
    final metaEn = en[metaKey];

    final hasTarget = target.containsKey(key);
    final targetVal = hasTarget ? target[key] : null;
    final metaTarget = target[metaKey];

    // –û–ø—Ä–µ–¥–µ–ª–∏–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∑–∞–ª–∏–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥: —Å—Ä–∞–≤–Ω–∏–º x-sourceText (—á—Ç–æ –±—ã–ª–æ –≤ target) —Å —Ç–µ–∫—É—â–∏–º EN
    final oldSourceText = (metaTarget is Map<String, dynamic>)
        ? (metaTarget['x-sourceText'] as String?)
        : null;
    final needTranslate = !hasTarget || (oldSourceText != enVal);

    if (needTranslate) {
      added += hasTarget ? 0 : 1;

      if (apiBase != null && apiBase.trim().isNotEmpty) {
        // –≥–æ—Ç–æ–≤–∏–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –±–∞—Ç—á–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        batch.add({
          'key': key,
          'text': enVal,
          'placeholders': _extractPlaceholders(metaEn),
          'description': (metaEn is Map<String, dynamic>)
              ? (metaEn['description'] ?? '')
              : '',
        });

        // –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ—Å—Ç–∞–≤–∏–º EN (—á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å UI –¥–æ –æ—Ç–≤–µ—Ç–∞), –∑–∞–º–µ–Ω–∏–º –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        out[key] = enVal;
      } else {
        // –±–µ–∑ API: —Å—Ç–∞–≤–∏–º "" –∏–ª–∏ EN
        out[key] = copyEmpty ? '' : enVal;
      }
    } else {
      // –ø–µ—Ä–µ–≤–æ–¥ –∞–∫—Ç—É–∞–ª–µ–Ω ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
      out[key] = targetVal;
    }
  }

  // –µ—Å–ª–∏ –µ—Å—Ç—å API ‚Äî —Å—Ö–æ–¥–∏—Ç—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
  if (batch.isNotEmpty && apiBase != null && apiBase.trim().isNotEmpty) {
    final chunks = _chunk(batch, 50); // –±–∞—Ç—á–∏–º –Ω–∞ –≤—Å—è–∫–∏–π
    for (final part in chunks) {
      try {
        final resp = await http.post(
          Uri.parse(_join(apiBase, '/ai/translate')),
          headers: {'Content-Type': 'application/json'},
          body: jsonEncode({
            'source_lang': 'en',
            'target_lang': targetLocale,
            'items': part,
            // —Å–µ—Ä–≤–µ—Ä –ø—É—Å—Ç—å —Å–∞–º –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –ø–æ–¥—Å–∫–∞–∑–∫–µ "—Å–æ—Ö—Ä–∞–Ω—è–π {placeholders}"
          }),
        );
        if (resp.statusCode == 200) {
          final j = jsonDecode(resp.body) as Map<String, dynamic>;
          final list = (j['translations'] as List).cast<Map>();
          for (final t in list) {
            final k = t['key'] as String;
            final v = t['text'] as String? ?? '';
            out[k] = v;
            translated++;
          }
        } else {
          stderr.writeln(
              '‚ö†Ô∏è  API translate error ${resp.statusCode}: ${resp.body}');
          // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º: out —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç EN (–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫)
        }
      } catch (e) {
        stderr.writeln('‚ö†Ô∏è  API translate exception: $e');
        // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º: out —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç EN (–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–æ–ª–ª–±—ç–∫)
      }
    }
  }

  // —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–Ω–æ—Å–∏–º/–æ–±–Ω–æ–≤–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  for (final key in en.keys) {
    if (!key.startsWith('@')) {
      final metaKey = '@$key';
      final metaEn = en[metaKey];
      final prevMeta = target[metaKey];

      final mergedMeta = <String, dynamic>{};

      // placeholders/description –±–µ—Ä—ë–º –∏–∑ EN
      if (metaEn is Map<String, dynamic>) {
        mergedMeta.addAll(metaEn);
      }

      // –µ—Å–ª–∏ –≤ target –±—ã–ª–æ —Å–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî –æ—Å—Ç–∞–≤–∏–º –µ–≥–æ
      if (prevMeta is Map<String, dynamic>) {
        if (prevMeta['description'] != null) {
          mergedMeta['description'] = prevMeta['description'];
        }
        // —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
        for (final e in prevMeta.entries) {
          final k = e.key;
          if (k == 'placeholders' || k == 'description') continue;
          mergedMeta[k] = e.value;
        }
      }

      final wasMissing = !target.containsKey(key);
      final oldSourceText = (prevMeta is Map<String, dynamic>)
          ? (prevMeta['x-sourceText'] as String?)
          : null;
      final enVal = en[key];

      final retranslatedNow = wasMissing || (oldSourceText != enVal);

      // –æ—Ç–º–µ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ç–µ–∫—É—â–∏–π –∏—Å—Ö–æ–¥–Ω—ã–π EN
      mergedMeta['x-sourceText'] = enVal;
      if (retranslatedNow) {
        // –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ —á–µ—Ä–µ–∑ API ‚Äî machine; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî pending
        final gotMachine = out.containsKey(key) && out[key] != enVal;
        mergedMeta['x-translationState'] = gotMachine ? 'machine' : 'pending';
        mergedMeta['x-updated'] = DateTime.now().toIso8601String();
      }

      out[metaKey] = mergedMeta;
    }
  }

  // –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü —Ç–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ target (—á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å)
  for (final key in target.keys) {
    if (!out.containsKey(key)) {
      out[key] = target[key];
    }
  }

  return _MergeResult(out, added, translated);
}

List<String> _extractPlaceholders(dynamic metaEn) {
  if (metaEn is Map<String, dynamic>) {
    final ph = metaEn['placeholders'];
    if (ph is Map<String, dynamic>) {
      return ph.keys.toList();
    }
  }
  return const [];
}

Iterable<List<T>> _chunk<T>(List<T> list, int size) sync* {
  for (var i = 0; i < list.length; i += size) {
    final end = (i + size < list.length) ? i + size : list.length;
    yield list.sublist(i, end);
  }
}

String _join(String base, String path) {
  if (base.endsWith('/')) base = base.substring(0, base.length - 1);
  if (!path.startsWith('/')) path = '/$path';
  return '$base$path';
}
