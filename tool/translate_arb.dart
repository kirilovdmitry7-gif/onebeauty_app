// A tiny ARB sync/translate helper.
//
// –ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
// - –ë–µ—Ä—ë—Ç lib/l10n/app_en.arb –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã.
// - –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ app_*.arb (ru, es, ...):
//   * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –∏–∑ EN (–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ EN, —á—Ç–æ–±—ã UI –Ω–µ –ø–∞–¥–∞–ª).
//   * –ö–æ–ø–∏—Ä—É–µ—Ç @-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (placeholders, description) –∏–∑ EN.
//   * –ü–æ–º–µ—á–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö x-translationState="pending".
//   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏ (–Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ—Ç).
//
// –ó–∞–ø—É—Å–∫:
//   dart run tool/translate_arb.dart
//
// –ó–∞—Ç–µ–º –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏:
//   flutter gen-l10n
//
// –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ—Ç.

import 'dart:convert';
import 'dart:io';

const String l10nDir = 'lib/l10n';
const String baseFile = 'app_en.arb';

final JsonEncoder _encoder = const JsonEncoder.withIndent('  ');

void main(List<String> args) async {
  final basePath = '$l10nDir/$baseFile';
  final baseHandle = File(basePath);
  if (!await baseHandle.exists()) {
    stderr.writeln('‚ùå Not found: $basePath');
    exit(2);
  }

  final Map<String, dynamic> base = _readJson(basePath);
  stdout.writeln('üåê Base locale: en ($baseFile)');

  final dir = Directory(l10nDir);
  if (!await dir.exists()) {
    stderr.writeln('‚ùå Directory not found: $l10nDir');
    exit(2);
  }

  final targetFiles = <File>[];
  await for (final ent in dir.list()) {
    if (ent is! File) continue;
    if (!ent.path.endsWith('.arb')) continue;
    final basename = ent.path.split(Platform.pathSeparator).last;
    if (basename == baseFile) continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º app_en.arb
    targetFiles.add(ent);
  }

  if (targetFiles.isEmpty) {
    stdout.writeln(
        '‚ö†Ô∏è  No target ARB files found in $l10nDir (only $baseFile present).');
    return;
  }

  int totalAdded = 0;

  for (final f in targetFiles) {
    final locale = _inferLocaleFromFile(f.path) ?? '??';
    stdout.writeln('\n‚Äî‚Äî‚Äî\nüìù Processing ${f.path} (locale: $locale)');

    final target = _readJson(f.path);
    final outcome = _mergeArb(base, target, locale);

    final sink = f.openWrite();
    sink.write(_encoder.convert(outcome.map));
    sink.writeln(); // newline at EOF
    await sink.flush();
    await sink.close();

    stdout.writeln('‚úÖ Updated ${f.path}. Added ${outcome.added} key(s).');
    totalAdded += outcome.added;
  }

  stdout.writeln('\nüéâ Done. Total added: $totalAdded.');
  stdout.writeln('üëâ Now run:  flutter gen-l10n');
}

/// –ß–∏—Ç–∞–µ—Ç JSON –∫–∞–∫ Map<String, dynamic>. –û—à–∏–±–∫–∞ ‚Üí –ø—É—Å—Ç–∞—è map.
Map<String, dynamic> _readJson(String path) {
  try {
    final text = File(path).readAsStringSync();
    final obj = jsonDecode(text);
    if (obj is Map<String, dynamic>) return obj;
  } catch (e) {
    stderr.writeln('‚ùå JSON parse error in $path: $e');
  }
  return <String, dynamic>{};
}

/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—è–Ω–∏—è.
class MergeOutcome {
  final Map<String, dynamic> map;
  final int added;
  MergeOutcome(this.map, this.added);
}

/// –°–ª–∏–≤–∞–µ—Ç EN ‚Üí target, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–µ—Ä–µ–≤–æ–¥—ã –∏ –ø–æ—Ä—è–¥–æ–∫ –∫–ª—é—á–µ–π –∏–∑ EN.
MergeOutcome _mergeArb(
  Map<String, dynamic> en,
  Map<String, dynamic> target,
  String targetLocale,
) {
  final out = <String, dynamic>{};
  int added = 0;

  // 1) –ò–¥—ë–º –≤ –ø–æ—Ä—è–¥–∫–µ –∫–ª—é—á–µ–π EN
  for (final key in en.keys) {
    if (key.startsWith('@')) {
      // –ú–ï–¢–ê–î–ê–ù–ù–´–ï
      final metaEn = en[key];
      final metaTarget = target[key];

      final mergedMeta = <String, dynamic>{};
      if (metaEn is Map) {
        mergedMeta.addAll(Map<String, dynamic>.from(metaEn));
      }
      if (metaTarget is Map) {
        final mt = Map<String, dynamic>.from(metaTarget);
        // –ï—Å–ª–∏ –≤ target –±—ã–ª–æ —Å–≤–æ—ë –æ–ø–∏—Å–∞–Ω–∏–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ.
        if (mt['description'] != null) {
          mergedMeta['description'] = mt['description'];
        }
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—é–±—ã–µ –¥–æ–ø. –ø–æ–ª—è (–∫—Ä–æ–º–µ placeholders/description ‚Äî –¥–ª—è –Ω–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞–∫ –≤—ã—à–µ).
        for (final entry in mt.entries) {
          final mk = entry.key;
          if (mk == 'placeholders' || mk == 'description') continue;
          mergedMeta[mk] = entry.value;
        }
      }
      out[key] = mergedMeta;
      continue;
    }

    // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (target.containsKey(key)) {
      // –ï—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥ ‚Äî –±–µ—Ä—ë–º –µ–≥–æ
      out[key] = target[key];
    } else {
      // –ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ ‚Äî –∫–æ–ø–∏—Ä—É–µ–º EN (—á—Ç–æ–±—ã UI –Ω–µ –ª–æ–º–∞–ª—Å—è) –∏ –ø–æ–º–µ—á–∞–µ–º "pending"
      out[key] = en[key];
      added++;

      final metaKey = '@$key';
      final metaEn = en[metaKey];
      final newMeta = <String, dynamic>{};
      if (metaEn is Map) {
        newMeta.addAll(Map<String, dynamic>.from(metaEn));
      }
      newMeta['x-translationState'] = 'pending';
      newMeta['x-note'] =
          'auto-copied from en on ${DateTime.now().toIso8601String().split("T").first}';
      out[metaKey] = newMeta;
    }
  }

  // 2) –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ target (–Ω–∏—á–µ–≥–æ –Ω–µ —Ç–µ—Ä—è–µ–º)
  for (final key in target.keys) {
    if (!out.containsKey(key)) {
      out[key] = target[key];
    }
  }

  return MergeOutcome(out, added);
}

/// –ò–∑ –ø—É—Ç–∏ –≤–∏–¥–∞ lib/l10n/app_ru.arb ‚Üí ru
String? _inferLocaleFromFile(String path) {
  final name = path.split(Platform.pathSeparator).last; // app_ru.arb
  final match = RegExp(r'app_([a-zA-Z_-]+)\.arb$').firstMatch(name);
  return match?.group(1);
}
